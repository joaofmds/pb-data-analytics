- 0. Saindo da zona de conforto

	- Ter mais ferramentas para usar no dia a dia
	- Quando você aprende linguagens imperativas, você se vê limitado ao escopo de criar e manipular variáveis
	- Usa-se programação funcional quando se programa em Lisp, Haskell, Scala, Erlang, F# etc..
	- Do mesmo modo que se usa programação imperativa quando se programada C/C++, Pascal, Java, Python etc...
	- Também quando se programa Prolog estamos programando usando o paradígma lógico
	- O foco de usar programação imperativa está no ato de mudar variáveis
		- Tudo é definido no início e vai se modificando até que o resultado esperado seja obtido
	- Na programação funcional, se tem a noção de que o estado deve ser substituído para criação de um novo 'objeto'

- 0.1 Mas de onde vem a programação funcional?

	- Lisp
		- Tentar resolver problemas da IA
		- Processamento de listas
	- (+ 4 5)
	- 4 + 5
	- Assertiva funcional
		- (= 4 (+ 2 2))
	- Imperativa
		- (2 + 2) == 4

-  0.2 Técnicas usadas por linguagens funcionais

	- Funções como objetos de primeira classe:
		- São funções que podem estar em qualquer lugar (em estruturas, declaradas em tempo de execução).
	- Funções de ordem superior:
		- São funções que podem receber funções como argumentos e retornar funções.
	- Funções puras:
		- São funções que não sofrem interferências de meios externos (variáveis de fora). Evita efeitos colaterais.
	- Recursão, como oposição aos loops:
		- Frequentemente a recursão na matemática é uma coisa mais intuitiva e é só chamar tudo outra vez, no lugar de ficar voltando ao ponto inicial da iteração.
	- Foco em processamento de iteráveis:
		- Como dito anteriormente, pensar em como as sequências podem nos ajudar a resolver problemas.
	- O que deve ser computado, não como computar:
		- Não ser tão expressivo e aceitar que as intruções não tem necessidade de estar explicitas todas as vezes, isso ajuda em legibilidade.
	- Lazy evaluation:
		- Criar sequências infinitas sem estourar nossa memória

- 0.3 Python é uma linguagem funcional?
  
	- Não, mas implementa muitos paradigmas
	- Escrever código que gere menos efeito colateral e código com menos estados

- A quem esse 'curso' é destinado?

	- Para quem sabe o básico de Python

- 0.5 Apresentando o Jaber

- 0.6 Sobre as referências

- 0.7 Mais sobre o histórico das linguagens funcionais